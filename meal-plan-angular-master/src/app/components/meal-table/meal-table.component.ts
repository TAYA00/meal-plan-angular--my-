//  –Ü–º–ø–æ—Ä—Ç–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫ —Ç–∞ –º–æ–¥—É–ª—ñ–≤
import { Component, OnInit } from '@angular/core'; //—Å—Å–∏–ª–∞—î–º–æ—Å—è –¥–æ angular –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –π–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
import { CommonModule } from '@angular/common'; //—Å—Å–∏–ª–∞—î–º–æ—Å—è –¥–æ angular –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –æ—Å–Ω–æ–≤–Ω–∏—Ö Angular-—É—Ç–∏–ª—ñ—Ç
import { HttpClient } from '@angular/common/http'; //—Å—Å–∏–ª–∞—î–º–æ—Å—è –¥–æ angular –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É HttpClient, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è HTTP-–∑–∞–ø–∏—Ç—ñ–≤
import { Observable } from 'rxjs'; //—ñ–º–ø–æ—Ä—Ç—É—î–º–æ Observable –∑ rxjs, —â–æ–± –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏.

// –û–ü–ò–° –Ü–ù–¢–ï–†–§–ï–ô–°–Ü–í –î–ê–ù–ò–•

// –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–ª–µ—Ä–≥–µ–Ω—É
interface Allergen {
  Id: string;
  Label: string;
}

//–í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–æ–¥—É–∫—Ç
interface Product {
  ProductId: number;
  Name: string;
  AllergenIds?: string[];
  Price: { Betrag: number };
}

interface Row { 
  Name: string; 
  Days: { Weekday: number; ProductIds: { ProductId: number }[] }[] 
}

interface Day {
  Weekday: number; 
  ProductIds: { ProductId: number }[] ;
}


//–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –∑ API –¥–∞–Ω–∏—Ö
interface MealData {
  Allergens: { [key: string]: Allergen }; //Allergens ‚Äì –æ–±'—î–∫—Ç, –¥–µ –∫–ª—é—á–µ–º —î —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∞–ª–µ—Ä–≥–µ–Ω—É, –∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º ‚Äì –π–æ–≥–æ –æ–ø–∏—Å.
  Products: { [key: string]: Product }; //Products ‚Äì –æ–±'—î–∫—Ç, –¥–µ –∫–ª—é—á ‚Äì ProductId, –∞ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äì —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç.
  Rows: { Name: string; Days: { Weekday: number; ProductIds: { ProductId: number }[] }[] }[];
  //Rows ‚Äì –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ (—Ä—è–¥–∏), –¥–µ –∫–æ–∂–µ–Ω –º—ñ—Å—Ç–∏—Ç—å
  // Name ‚Äì –Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏.
  // Days ‚Äì –º–∞—Å–∏–≤ –¥–Ω—ñ–≤, –∫–æ–ª–∏ —Å—Ç—Ä–∞–≤—É –ø–æ–¥–∞—é—Ç—å.
}

//–û–ü–ò–° ANGULAR –ö–û–ú–ü–û–ù–ï–ù–¢–£

@Component({
  selector: 'app-meal-table', // –≤–∏–∑–Ω–∞—á–∞—î, –ø—ñ–¥ —è–∫–æ—é –Ω–∞–∑–≤–æ—é –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É HTML
  // <app-meal-table></app-meal-table> —É app.component.html
  standalone: true, //—Ä–æ–±–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∞–º–æ—Å—Ç—ñ–π–Ω–∏–º (–Ω–µ –≤–∏–º–∞–≥–∞—î NgModule
  imports: [CommonModule], //–ø—ñ–¥–∫–ª—é—á–∞—î CommonModule –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Angular-–¥–∏—Ä–µ–∫—Ç–∏–≤.
  templateUrl: '../meal-table/meal-table.component.html', //—à–∞–±–ª–æ–Ω HTML-–∫–æ–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  styleUrls: ['../meal-table/meal-table.component.css'] //—à–∞–±–ª–æ–Ω —Å—Ç–∏–ª—ñ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
})

//–û–ü–ò–° –ö–õ–ê–°–£ –ö–û–ú–ü–û–ù–ï–ù–¢–£

export class MealTableComponent implements OnInit {
  data!: MealData;
  rows: any[] = [];
  isLoading = true;
  errorMessage = '';
  private apiUrl = 'https://mypreLive.qnips.com/dbapi/ha';
  daysOfWeek: { name: string; date: string }[] = [];
  weekNumber!: number; // üîπ Variable f√ºr KW

  weekdays = [0, 1, 2, 3, 4, 5, 6,];

  //–ö–û–ù–°–¢–†–£–ö–¢–û–† –Ω–µ–¥—Ä—é—î HttpClient –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è HTTP-–∑–∞–ø–∏—Ç—ñ–≤
  constructor(private http: HttpClient) { }

  ngOnInit(): void {
    this.fetchMeals().subscribe({
      next: (response) => {
        console.log('Erhaltene Daten:', response);
        if (response) {
          this.data = response as MealData;
          this.rows = this.processMeals(this.data.Rows ?? []);

        }
        this.generateWeekDates();
        this.weekNumber = this.getISOWeek(new Date()); // üîπ Abfrage der aktuellen Wochennummer
        this.isLoading = false;
      },
      error: (error) => {
        console.error(`Fehler beim Laden: ${error.message}`);
        this.errorMessage = 'Hochladen von Daten nicht m√∂glich';
        this.isLoading = false;
      }
    });
  }

  fetchMeals(): Observable<MealData> {
    return this.http.get<MealData>(this.apiUrl);
  }

  //–ü–µ—Ä–µ—Ä–æ–∑–ø–æ–¥—ñ–ª—è—î —Å—Ç—Ä–∞–≤–∏ –∑ —Å–µ—Ä–µ–¥–∏ (Weekday 2) –Ω–∞ —ñ–Ω—à—ñ –¥–Ω—ñ —Ç–∏–∂–Ω—è.

  private processMeals(rows: any[]): any[] {
    return rows.map(row => {
      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤—Å—ñ –¥–Ω—ñ, –∫—Ä—ñ–º —Å–µ—Ä–µ–¥–∏ (2)
      let updatedDays = row.Days.filter((day: { Weekday: number }) => day.Weekday !== 2);

      //; ProductIds: { ProductId: number }[] }) => day.Weekday !== 2);

      // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ —Å–µ—Ä–µ–¥–∏
      const wednesdayData = row.Days.find((day: { Weekday: number }) => day.Weekday === 2);
      if (wednesdayData && wednesdayData.ProductIds?.length > 0) {
        const productsToDistribute = [...wednesdayData.ProductIds]; // –ö–æ–ø—ñ—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–≤

        // –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ–Ω—à–∏—Ö –¥–Ω—ñ–≤, —Ä–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ –º—ñ–∂ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏
        if (updatedDays.length === 0) {
          updatedDays = [
            { Weekday: 0, ProductIds: [] },
            { Weekday: 1, ProductIds: [] },
            { Weekday: 3, ProductIds: [] },
            { Weekday: 4, ProductIds: [] },
            { Weekday: 5, ProductIds: [] },
            { Weekday: 6, ProductIds: [] }
          ];
        }

        // –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ —Å–µ—Ä–µ–¥–∏ –ø–æ —ñ–Ω—à–∏—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–Ω—è—Ö
        productsToDistribute.forEach((product, index) => {
          const targetDay = updatedDays[index % updatedDays.length]; // –í–∏–±–∏—Ä–∞—î–º–æ –¥–µ–Ω—å –ø–æ –∫—Ä—É–≥–æ–≤–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É
          targetDay.ProductIds.push(product);
        });
      }

      return { ...row, Days: updatedDays };
    });
  }

  private generateWeekDates(): void {
    const today = new Date();
    const currentDay = today.getDay();
    const monday = new Date(today);
    monday.setDate(today.getDate() - (currentDay === 0 ? 6 : currentDay - 1));

    const days = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'];
    this.daysOfWeek = days.map((day, index) => {
      const date = new Date(monday);
      date.setDate(monday.getDate() + index);
      return { name: day, date: date.toLocaleDateString('uk-DE') };
    });
  }

  private getISOWeek(date: Date): number {
    const tempDate = new Date(date.getTime());
    tempDate.setHours(0, 0, 0, 0);
    tempDate.setDate(tempDate.getDate() + 3 - ((tempDate.getDay() + 6) % 7));
    const firstThursday = tempDate.getTime();
    tempDate.setMonth(0, 1);
    if (tempDate.getDay() !== 4) {
      tempDate.setMonth(0, 1 + ((4 - tempDate.getDay() + 7) % 7));
    }
    return Math.ceil((firstThursday - tempDate.getTime()) / 604800000) + 1;
  }

  getProducts(weekday: number, row: Row) {
    let productIds = row.Days.find((day) => day.Weekday == weekday)?.ProductIds.map((prod) =>  prod.ProductId)
    let products = productIds?.map((id) =>  this.data.Products[id] )

    return products;
  }

  getAllergenNames(product: Product): string {
    if (!product.AllergenIds || product.AllergenIds.length === 0 || !this.data?.Allergens) {
      return 'Keine Allergene';
    }
    return product.AllergenIds
      .map(aid => this.data.Allergens[aid]?.Label || 'Unbekanntes Allergen')
      .join(', ');
  }

}

